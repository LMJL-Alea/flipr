// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stat_student_impl
double stat_student_impl(const Rcpp::NumericVector& distanceMatrix, const Rcpp::IntegerVector& firstGroupIndices, const Rcpp::IntegerVector& secondGroupIndices);
RcppExport SEXP _flipr_stat_student_impl(SEXP distanceMatrixSEXP, SEXP firstGroupIndicesSEXP, SEXP secondGroupIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type distanceMatrix(distanceMatrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type firstGroupIndices(firstGroupIndicesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type secondGroupIndices(secondGroupIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_student_impl(distanceMatrix, firstGroupIndices, secondGroupIndices));
    return rcpp_result_gen;
END_RCPP
}
// stat_fisher_impl
double stat_fisher_impl(const Rcpp::NumericVector& distanceMatrix, const Rcpp::IntegerVector& firstGroupIndices, const Rcpp::IntegerVector& secondGroupIndices);
RcppExport SEXP _flipr_stat_fisher_impl(SEXP distanceMatrixSEXP, SEXP firstGroupIndicesSEXP, SEXP secondGroupIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type distanceMatrix(distanceMatrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type firstGroupIndices(firstGroupIndicesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type secondGroupIndices(secondGroupIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_fisher_impl(distanceMatrix, firstGroupIndices, secondGroupIndices));
    return rcpp_result_gen;
END_RCPP
}
// stat_bg_impl
double stat_bg_impl(const Rcpp::NumericVector& distanceMatrix, const Rcpp::IntegerVector& firstGroupIndices, const Rcpp::IntegerVector& secondGroupIndices);
RcppExport SEXP _flipr_stat_bg_impl(SEXP distanceMatrixSEXP, SEXP firstGroupIndicesSEXP, SEXP secondGroupIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type distanceMatrix(distanceMatrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type firstGroupIndices(firstGroupIndicesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type secondGroupIndices(secondGroupIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_bg_impl(distanceMatrix, firstGroupIndices, secondGroupIndices));
    return rcpp_result_gen;
END_RCPP
}
// stat_energy_impl
double stat_energy_impl(const Rcpp::NumericVector& distanceMatrix, const Rcpp::IntegerVector& firstGroupIndices, const Rcpp::IntegerVector& secondGroupIndices, const unsigned int alphaValue);
RcppExport SEXP _flipr_stat_energy_impl(SEXP distanceMatrixSEXP, SEXP firstGroupIndicesSEXP, SEXP secondGroupIndicesSEXP, SEXP alphaValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type distanceMatrix(distanceMatrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type firstGroupIndices(firstGroupIndicesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type secondGroupIndices(secondGroupIndicesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alphaValue(alphaValueSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_energy_impl(distanceMatrix, firstGroupIndices, secondGroupIndices, alphaValue));
    return rcpp_result_gen;
END_RCPP
}
// stat_cq_impl
double stat_cq_impl(const Rcpp::NumericVector& similarityMatrix, const Rcpp::IntegerVector& firstGroupIndices, const Rcpp::IntegerVector& secondGroupIndices);
RcppExport SEXP _flipr_stat_cq_impl(SEXP similarityMatrixSEXP, SEXP firstGroupIndicesSEXP, SEXP secondGroupIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type similarityMatrix(similarityMatrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type firstGroupIndices(firstGroupIndicesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type secondGroupIndices(secondGroupIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_cq_impl(similarityMatrix, firstGroupIndices, secondGroupIndices));
    return rcpp_result_gen;
END_RCPP
}
// getElement
double getElement(const Rcpp::NumericVector& distObject, const unsigned int rowIndex, const unsigned int colIndex);
RcppExport SEXP _flipr_getElement(SEXP distObjectSEXP, SEXP rowIndexSEXP, SEXP colIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type distObject(distObjectSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type rowIndex(rowIndexSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type colIndex(colIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(getElement(distObject, rowIndex, colIndex));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flipr_stat_student_impl", (DL_FUNC) &_flipr_stat_student_impl, 3},
    {"_flipr_stat_fisher_impl", (DL_FUNC) &_flipr_stat_fisher_impl, 3},
    {"_flipr_stat_bg_impl", (DL_FUNC) &_flipr_stat_bg_impl, 3},
    {"_flipr_stat_energy_impl", (DL_FUNC) &_flipr_stat_energy_impl, 4},
    {"_flipr_stat_cq_impl", (DL_FUNC) &_flipr_stat_cq_impl, 3},
    {"_flipr_getElement", (DL_FUNC) &_flipr_getElement, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_flipr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
